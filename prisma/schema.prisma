// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
  schemas           = ["public", "obra"]
}

model User {
  id           String   @id @default(uuid())
  username     String
  email        String   @unique
  password     String
  active       Boolean
  roles        String
  departament  String
  emailmanager String
  createdat    DateTime @default(now())
  updatedat    DateTime

  account_id   String?  @db.Uuid
  account      Account? @relation(fields: [account_id], references: [id])

  Session      Session[]

  @@map("User")
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

model Account {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  status    Boolean  @default(false)

  users     User[]
  obras     CadastroObra[]
  pagamentos Pagamento[]

  @@map("account")
  @@schema("obra")
}

model CadastroObra {
  idobra          String     @id @default(uuid()) @db.Uuid
  nome            String?
  endereco        String?
  bairro          String?
  area            String?
  tipo            String?
  casagerminada   Boolean?
  status          Boolean?
  dataInicioObra  DateTime?  @map("data_inicio_obra")
  dataFinalObra   DateTime?  @map("data_final_obra")
  createdAt       DateTime?  @default(now()) @map("created_at")
  updatedAt       DateTime?  @default(now()) @map("updated_at")
  account_id      String?    @db.Uuid
  userid_at       String?
  username_at     String?
  previsto        Float?

  account         Account?   @relation(fields: [account_id], references: [id])
  pagamentos      Pagamento[]

  @@map("cadastroobra")
  @@schema("obra")
}

model Pagamento {
  id              Int       @id @default(autoincrement())
  idobra          String?   @db.Uuid
  dataPagamento   DateTime? @map("data_do_pagamento")
  detalhe         String?
  categoria       String?
  valor           Float?
  observacao      String?
  createdAt       DateTime? @default(now()) @map("created_at")
  updatedAt       DateTime? @default(now()) @map("updated_at")
  account_id      String?   @db.Uuid
  userid_at       String?
  username_at     String?

  obra            CadastroObra? @relation(fields: [idobra], references: [idobra])
  account         Account?      @relation(fields: [account_id], references: [id])

  @@map("pagamento")
  @@schema("obra")
}

model Props {
  id        String   @id @default(uuid()) @db.Uuid
  tipo      String?
  campo     String?
  subcampo  String?
  titulo    String?
  status    Boolean? @default(false)

  @@map("props")
  @@schema("obra")
}